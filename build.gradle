/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'sbenthot' at '19/10/18 4:50 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

configurations {
    jaxws

}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

/**
 * Configuration for JAR files provided by the runtime environment. These are not
 * packaged as part of the application distribution.
 */
if (project.properties['sourceSets'] != null) {
    configurations { 
        providedCompile        
    }

    sourceSets {
        main {
            compileClasspath += [configurations.providedCompile]
        }
        test {
            compileClasspath += [configurations.providedCompile]
            runtimeClasspath += [configurations.providedCompile]
        }
    }
    
    eclipse.classpath.plusConfigurations += [configurations.providedCompile]    
}

// In this section you declare the dependencies for your production and test code
dependencies {
     jaxws (
            [group: 'com.sun.xml.ws', name: 'jaxws-tools', version: '2.2.8'],
            [group: 'com.sun.xml.ws', name: 'jaxws-rt', version: '2.2.8'],
            [group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics', version: '0.6.5']
            )

     compile (
            [group: 'org.jboss.ejb3', name: 'jboss-ejb3-ext-api', version: '2.1.0'],
            [group: 'org.apache.cxf', name: 'cxf-api', version: '2.7.7'],
            [group: 'mysql', name: 'mysql-connector-java', version: '8.0.12']
            )
    
     providedCompile(
            [group: 'javax.ejb', name: 'javax.ejb-api', version: '3.2'],
            [group: 'org.jboss.ws', name: 'jbossws-common', version: '2.2.3.Final'],
            [group: 'org.apache.openjpa', name:'openjpa', version: '2.2.2']                 
            )           

}

task wsimport1 {
     def srcDir = "${projectDir}/generated/src/java"
     def jaxwsTargetSrcDir = file(srcDir)

     def classesDir = "${projectDir}/generated/classes"
     def jaxwsTargetClassesDir = file(classesDir)
            
    doLast {
        ant {
            println "Generating JAX-WS classes for  WSDL..."

            ant.taskdef(
                    name: 'wsimport',
                    classname: 'com.sun.tools.ws.ant.WsImport',
                    classpath: configurations.jaxws.asPath)
            
            ant.jaxwsTargetSrcDir = jaxwsTargetSrcDir
            jaxwsTargetSrcDir.mkdirs()

            ant.jaxwsTargetClassesDir = jaxwsTargetClassesDir
            jaxwsTargetClassesDir.mkdirs()

            ant.wsimport(
                    wsdl: "${projectDir}/src/main/resources/META-INF/wsdl/HelloXSD.wsdl",
                    sourcedestdir: srcDir,
                    destdir: classesDir,
                     package: "com.shyali.xsd.service",
                    extension: true,
                    verbose: true,
                    keep: true) {  
            }
        }
    }
}


sourceSets {
    main {
        java {
            srcDirs = [
                "${projectDir}/src/main/java",
                "${projectDir}/generated/src/java"
            ]
            output.classesDir "${projectDir}/generated/classes"
        }
        
       compileClasspath = sourceSets.main.compileClasspath
    }
  }

eclipse {
    classpath {
        file.whenMerged { cp ->
            cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder('${projectDir}/generated/src/java', null) )
        }
    }
}


task jpaJar(
    type: Jar,
    group: 'Build',
    description: 'Assembles a jar archive containing the generated classes') {

    from {
        [
            sourceSets.main.output,
        ]
    }
    
    archiveName = "${archivesBaseName}.jar"
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

assemble.dependsOn(jpaJar)

compileJava {
    dependsOn wsimport1
}